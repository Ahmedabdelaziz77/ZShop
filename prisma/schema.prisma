generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  file_id String
  url     String

  userId String? @db.ObjectId
  user   users?  @relation(name: "UserAvatar", fields: [userId], references: [id])

  shopId String? @db.ObjectId
  shop   shops?  @relation(name: "ShopAvatar", fields: [shopId], references: [id])

  productsId String?   @db.ObjectId
  product    products? @relation(name: "ProductImages", fields: [productsId], references: [id])
}

model users {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String          @unique
  password    String?
  following   String[]
  avatar      images[]        @relation(name: "UserAvatar")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  shopReviews shopReviews[]
  shopFollows shopFollowers[]
  orders      orders[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String   @db.ObjectId
  shops     shops?   @relation(fields: [shopsId], references: [id])
}

model shops {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images[]        @relation(name: "ShopAvatar")
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float           @default(0)
  reviews       shopReviews[]
  sellerId      String          @unique @db.ObjectId
  sellers       sellers         @relation(fields: [sellerId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  products      products[]
  followers     shopFollowers[]
  orders        orders[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  shop         shops?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       orders[]
}

model site_configs {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String        @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]      @relation(name: "ProductImages")
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float         @default(0)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?      @default(false)
  cashOnDelivery        String?
  discount_codes        String[]      @db.ObjectId
  status                productStatus @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  shopId                String        @db.ObjectId
  shop                  shops         @relation(fields: [shopId], references: [id])
  totalSales            Int           @default(0)
  orderItems            orderItems[]
}

model userAnalytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  lastVisited DateTime
  country     String?
  city        String?
  device      String?
  actions     Json // array of {productId, shopId, action, timestamp}
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model productAnalytics {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  productId    String    @unique @db.ObjectId
  shopId       String?
  views        Int       @default(0)
  cartAdds     Int       @default(0)
  wishlistAdds Int       @default(0)
  purchases    Int       @default(0)
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model shopAnalytics {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  shopId   String @unique @db.ObjectId
  sellerId String @db.ObjectId

  totalVisitors Int  @default(0)
  countryStats  Json @default("{}")
  cityStats     Json @default("{}")
  deviceStats   Json @default("{}")

  lastVisitedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model shopFollowers {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  shopId String @db.ObjectId
  userId String @db.ObjectId

  shop shops @relation(fields: [shopId], references: [id])
  user users @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shopId, userId])
}

enum orderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model orderItems {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())

  order   orders   @relation(fields: [orderId], references: [id])
  product products @relation(fields: [productId], references: [id])
}

model orders {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  userId        String      @db.ObjectId
  shopId        String      @db.ObjectId
  sellerId      String      @db.ObjectId
  total         Float
  subtotal      Float
  discount      Float?      @default(0)
  paymentMethod String
  status        orderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user       users        @relation(fields: [userId], references: [id])
  shop       shops        @relation(fields: [shopId], references: [id])
  seller     sellers      @relation(fields: [sellerId], references: [id])
  orderItems orderItems[]

  // Optional: delivery and tracking
  shippingAddress Json?
  trackingCode    String?
  deliveredAt     DateTime?
}
